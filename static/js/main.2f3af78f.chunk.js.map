{"version":3,"sources":["Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","props","className","type","onChange","changed","value","class","onClick","click","App","state","tasks","currentTask","text","key","inputHandler","bind","taskAdd","taskChanged","deleteTask","e","this","setState","target","Date","now","console","log","preventDefault","newTask","task","map","taskid","taskdelete","splice","todolist","item","onSubmit","placeholder","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA4BeA,G,YAzBE,SAACC,GACd,OACI,yBAAKC,UAAU,QACX,2BACA,2BAAOC,KAAK,OACRC,SAAUH,EAAMI,QAChBC,MAAOL,EAAMK,QACjB,8BACA,2BAAOC,MAAM,aAAb,WACQ,2BAAOJ,KAAK,WAAWD,UAAU,WAAWI,MAAM,aAClD,0BAAMC,MAAM,eAEZ,4BAAQL,UAAU,MAAMM,QAASP,EAAMQ,OAAvC,eC6FLC,E,YArGb,WAAYT,GAAO,IAAD,8BAChB,4CAAMA,KACDU,MAAM,CACTC,MAAM,GACNC,YAAY,CACVC,KAAK,GACLC,IAAI,KAIR,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAbF,E,0EAgBLI,GACXC,KAAKC,SAAS,CACZV,YAAY,CACVC,KAAMO,EAAEG,OAAOlB,MACfS,IAAKU,KAAKC,SAGdC,QAAQC,IAAIN,KAAKX,S,8BAGZU,GACNA,EAAEQ,iBACF,IAAMC,EAAUR,KAAKX,MAAME,YAC3B,GAAoB,KAAjBiB,EAAQhB,KAAY,CACrB,IAAMiB,EAAI,sBAAOT,KAAKX,MAAMC,OAAlB,CAAwBkB,IAClCR,KAAKC,SAAS,CACZX,MAAOmB,EACPlB,YAAY,CACVC,KAAK,GACLC,IAAI,MAGRY,QAAQC,IAAIN,KAAKX,U,kCAKTG,EAAKC,GACf,IAAMgB,EAAOT,KAAKX,MAAMC,MACxBmB,EAAKC,KAAI,SAAAC,GACJA,EAAOlB,MAAMA,IACdY,QAAQC,IAAIK,EAAOlB,IAAI,IAAIA,GAC3BkB,EAAOnB,KAAOA,MAGlBQ,KAAKC,SAAS,CACZX,MAAOmB,M,iCAIAhB,GACTY,QAAQC,IAAIb,GACb,IAAMmB,EAAaZ,KAAKX,MAAMC,MAC9BsB,EAAWC,OAAOpB,EAAI,GACrBO,KAAKC,SAAS,CACZQ,KAAMG,M,+BAIA,IAAD,OAGDE,EACH,6BACGd,KAAKX,MAAMC,MAAMoB,KAAI,SAACK,EAAKtB,GAC1B,OAAQ,kBAAC,EAAD,CACRA,IAAKsB,EAAKtB,IAEVT,MAAO+B,EAAKvB,KACZL,MAAO,kBAAM,EAAKW,WAAWL,IAC7BV,QAAS,SAACgB,GAAD,OAAK,EAAKF,YAAYE,EAAEG,OAAOlB,MAAM+B,EAAKtB,YAKzD,OACE,6BACE,wBAAIb,UAAU,OAAd,yBACF,yBAAKA,UAAU,QACb,gCACE,0BAAMA,UAAU,SAASoC,SAAUhB,KAAKJ,SACtC,2BAAOf,KAAK,OAAOoC,YAAY,mBAC7BjC,MAAOgB,KAAKX,MAAME,YAAYC,KAC9BV,SAAUkB,KAAKN,eAEjB,4BAAQwB,GAAG,SAASrC,KAAK,UAAzB,QAEFiC,S,GA/FQK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f3af78f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todolist.css';\r\n\r\nconst Todolist = (props) => {\r\n    return(\r\n        <div className=\"list\">\r\n            <p>\r\n            <input type=\"text\"\r\n                onChange={props.changed}\r\n                value={props.value} ></input>\r\n            <span>\r\n            <label class=\"container\">Complete\r\n                    <input type=\"checkbox\" className=\"checkbox\" value=\"Complete\"></input>\r\n                    <span class=\"checkmark\"></span>\r\n            </label>\r\n                    <button className=\"btn\" onClick={props.click}>Delete</button>\r\n            </span>\r\n      \r\n            </p>\r\n        \r\n        </div>\r\n      \r\n    )\r\n\r\n \r\n}\r\n\r\n\r\nexport default Todolist;","import React from 'react';\nimport './App.css';\nimport Todolist from './Todolist';\n\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state={\n      tasks:[],\n      currentTask:{\n        text:'',\n        key:''\n      }\n    }\n\n    this.inputHandler = this.inputHandler.bind(this);\n    this.taskAdd = this.taskAdd.bind(this);\n    this.taskChanged = this.taskChanged.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n  }\n\n  inputHandler(e){\n    this.setState({\n      currentTask:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n    console.log(this.state)\n  }\n\n taskAdd(e){\n   e.preventDefault();\n   const newTask = this.state.currentTask;\n   if(newTask.text !== \"\"){\n     const task = [...this.state.tasks,newTask];\n     this.setState({\n       tasks: task,\n       currentTask:{\n         text:'',\n         key:''\n       }\n     })\n     console.log(this.state)\n   }\n \n }\n\n taskChanged(text,key){\n   const task = this.state.tasks;\n   task.map(taskid=>{\n     if(taskid.key===key){\n       console.log(taskid.key+\" \"+key);\n       taskid.text = text;\n     }\n   });\n   this.setState({\n     tasks: task\n   });\n }\n\n deleteTask(key){\n   console.log(key);\n  const taskdelete = this.state.tasks;\n  taskdelete.splice(key,1);\n   this.setState({\n     task: taskdelete\n   })\n }\n\n  render(){\n  \n      \n   const todolist = (\n      <div>\n        {this.state.tasks.map((item,key)=>{\n          return  <Todolist \n          key={item.key}\n          //items={this.state.task}\n          value={item.text}\n          click={() => this.deleteTask(key)}\n          changed={(e)=>this.taskChanged(e.target.value,item.key)}></Todolist>\n        })}\n        \n      </div>\n    );\n    return(\n      <div>\n        <h1 className=\"App\">Reactjs To Do Project</h1>\n      <div className=\"main\">\n        <header>\n          <form className=\"formtd\" onSubmit={this.taskAdd}>\n            <input type=\"text\" placeholder=\"Enter Task To do\" \n              value={this.state.currentTask.text} \n              onChange={this.inputHandler}/>\n              \n            <button id=\"btnAdd\" type=\"submit\">Add</button>\n          </form>\n         {todolist}\n        </header>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}